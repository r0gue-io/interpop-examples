// Generated by dedot cli

import type { GenericSubstrateApi } from 'dedot/types'
import type { Result, AccountId32Like, Bytes } from 'dedot/codecs'
import type {
  GenericContractQuery,
  GenericContractQueryCall,
  ContractCallOptions,
  GenericContractCallResult,
  ContractCallResult,
} from 'dedot/contracts'
import type {
  HydraSwapXcmDepositedLocationLike,
  PopApiStatusCode,
  InkPrimitivesLangError,
  StagingXcmV4AssetLike,
} from './types.js'

export interface ContractQuery<ChainApi extends GenericSubstrateApi>
  extends GenericContractQuery<ChainApi> {
  /**
   * Swap USDT on Hydration and send back to the destination location.
   *
   * The method does a few different things:
   * 1. Transfers from Pop Network to Asset Hub as an intermediate location.
   * 2. Transfers from Asset Hub to Hydration.
   * 3. Swap PASEO to USDT on Hydration.
   * 4. Transfer USDT to the destination location
   *
   * Destination location can be a local account on Hydration or an account on another parachain.
   *
   * ## Arguments
   *
   * - `amount_out`: The minimum amount of USDT to receive.
   * - `max_amount_in`: The maximum amount of PASEO to spend.
   * - `fee_amount`: The fee amount to pay.
   * - `dest`: The destination location.
   *
   * @param {bigint} amountOut
   * @param {bigint} maxAmountIn
   * @param {bigint} feeAmount
   * @param {HydraSwapXcmDepositedLocationLike} dest
   * @param {ContractCallOptions} options
   *
   * @selector 0x7e12a81c
   **/
  swapUsdtOnHydra: GenericContractQueryCall<
    ChainApi,
    (
      amountOut: bigint,
      maxAmountIn: bigint,
      feeAmount: bigint,
      dest: HydraSwapXcmDepositedLocationLike,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Result<[], PopApiStatusCode>, ContractCallResult<ChainApi>>
    >
  >

  /**
   * Transfer to and swap on Hydration.
   *
   * Transfer `give_asset` to Hydration via `intermediary_hop`, swap from `give_asset` to `want_asset` and then transfer to `dest`.
   * Destination location `dest` can be a local account on Hydration or an account on another parachain.
   *
   * ## Arguments
   *
   * - `from_para`: The parachain ID of the sender.
   * - `intermediary_hop`: The parachain ID of the intermediary hop.
   * - `give_asset`: The asset to be given.
   * - `want_asset`: The asset to be wanted.
   * - `is_sell`: Whether the transaction is a sell.
   * - `fee`: The fee to be paid.
   * - `dest`: The destination location.
   *
   * @param {number} fromPara
   * @param {number} intermediaryHop
   * @param {StagingXcmV4AssetLike} giveAsset
   * @param {StagingXcmV4AssetLike} wantAsset
   * @param {boolean} isSell
   * @param {StagingXcmV4AssetLike} fee
   * @param {HydraSwapXcmDepositedLocationLike} dest
   * @param {ContractCallOptions} options
   *
   * @selector 0x344f3feb
   **/
  transferAndSwapOnHydra: GenericContractQueryCall<
    ChainApi,
    (
      fromPara: number,
      intermediaryHop: number,
      giveAsset: StagingXcmV4AssetLike,
      wantAsset: StagingXcmV4AssetLike,
      isSell: boolean,
      fee: StagingXcmV4AssetLike,
      dest: HydraSwapXcmDepositedLocationLike,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Result<[], PopApiStatusCode>, ContractCallResult<ChainApi>>
    >
  >

  /**
   * Fund a parachain directly. Only support reserve transferring.
   *
   * ## Arguments
   *
   * - `account`: The account to be funded.
   * - `from_para`: The parachain ID of the sender.
   * - `to_para`: The parachain ID of the recipient.
   * - `hashed`: Whether the account is hashed.
   *
   * @param {AccountId32Like} account
   * @param {number} fromPara
   * @param {number} toPara
   * @param {boolean} hashed
   * @param {ContractCallOptions} options
   *
   * @selector 0xe0331afe
   **/
  fundDirect: GenericContractQueryCall<
    ChainApi,
    (
      account: AccountId32Like,
      fromPara: number,
      toPara: number,
      hashed: boolean,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Result<[], PopApiStatusCode>, ContractCallResult<ChainApi>>
    >
  >

  /**
   * Fund a parachain indirectly with a native asset.
   *
   * Only support reserve transferring.
   * This method transfers the funds to the intermediary parachain and then to the target parachain.
   *
   * @param {AccountId32Like} account
   * @param {number} fromPara
   * @param {number} intermediaryHop
   * @param {number} toPara
   * @param {boolean} hashed
   * @param {ContractCallOptions} options
   *
   * @selector 0x903cad1f
   **/
  fundIndirect: GenericContractQueryCall<
    ChainApi,
    (
      account: AccountId32Like,
      fromPara: number,
      intermediaryHop: number,
      toPara: number,
      hashed: boolean,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Result<[], PopApiStatusCode>, ContractCallResult<ChainApi>>
    >
  >

  /**
   * Fund Hydration with a native asset.
   *
   * ## Arguments
   *
   * - `account`: The account to fund.
   * - `hashed`: Whether the account is hashed.
   *
   * @param {AccountId32Like} account
   * @param {boolean} hashed
   * @param {ContractCallOptions} options
   *
   * @selector 0xb7dc1ae9
   **/
  fundHydration: GenericContractQueryCall<
    ChainApi,
    (
      account: AccountId32Like,
      hashed: boolean,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Result<[], PopApiStatusCode>, ContractCallResult<ChainApi>>
    >
  >

  /**
   * Fund Asset Hub with a native asset.
   *
   * ## Arguments
   *
   * - `account`: The account to fund.
   * - `hashed`: Whether the account is hashed.
   *
   * @param {AccountId32Like} account
   * @param {boolean} hashed
   * @param {ContractCallOptions} options
   *
   * @selector 0xd0d9fd30
   **/
  fundAssetHub: GenericContractQueryCall<
    ChainApi,
    (
      account: AccountId32Like,
      hashed: boolean,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Result<[], PopApiStatusCode>, ContractCallResult<ChainApi>>
    >
  >

  /**
   *
   * @param {bigint} id
   * @param {ContractCallOptions} options
   *
   * @selector 0x2f865bd9
   **/
  get: GenericContractQueryCall<
    ChainApi,
    (
      id: bigint,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<Bytes | undefined, PopApiStatusCode>,
        ContractCallResult<ChainApi>
      >
    >
  >

  /**
   *
   * @param {bigint} id
   * @param {ContractCallOptions} options
   *
   * @selector 0xe9c084b2
   **/
  remove: GenericContractQueryCall<
    ChainApi,
    (
      id: bigint,
      options?: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Result<[], PopApiStatusCode>, ContractCallResult<ChainApi>>
    >
  >
}
